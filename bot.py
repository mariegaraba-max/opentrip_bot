> –ú–∞—Ä–∏—è:
import logging
import requests
from aiogram import Bot, Dispatcher, executor, types
import config

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞
user_data = {}

# --- –ì–µ–æ–∫–æ–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ Nominatim ---
def geocode(city: str):
    url = f"https://nominatim.openstreetmap.org/search"
    params = {"q": city, "format": "json", "limit": 1}
    r = requests.get(url, params=params)
    if r.ok and r.json():
        return float(r.json()[0]["lat"]), float(r.json()[0]["lon"])
    return None, None

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ OpenRouteService ---
def get_route(start, end, api_key):
    url = "https://api.openrouteservice.org/v2/directions/driving-car"
    headers = {"Authorization": api_key}
    params = {
        "start": f"{start[1]},{start[0]}",
        "end": f"{end[1]},{end[0]}"
    }
    r = requests.get(url, headers=headers, params=params)
    return r.json() if r.ok else None

# --- –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenTripMap ---
def get_places(lat, lon, radius, kinds, api_key, limit=5):
    url = "https://api.opentripmap.com/0.1/en/places/radius"
    params = {
        "apikey": api_key,
        "radius": radius,
        "lon": lon,
        "lat": lat,
        "limit": limit,
        "kinds": kinds
    }
    r = requests.get(url, params=params)
    return r.json()["features"] if r.ok else []

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üöó –Ø –ø–æ–º–æ–≥—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç.\n"
                         "–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")

@dp.message_handler(lambda m: "–≥–æ—Ä–æ–¥" not in user_data.get(m.from_user.id, {}))
async def set_start_city(message: types.Message):
    lat, lon = geocode(message.text)
    if not lat:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    user_data[message.from_user.id] = {"start_city": message.text, "start_coords": (lat, lon)}
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")

@dp.message_handler(lambda m: "end_city" not in user_data.get(m.from_user.id, {}))
async def set_end_city(message: types.Message):
    lat, lon = geocode(message.text)
    if not lat:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    user_data[message.from_user.id]["end_city"] = message.text
    user_data[message.from_user.id]["end_coords"] = (lat, lon)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º):")

@dp.message_handler(lambda m: "fuel" not in user_data.get(m.from_user.id, {}))
async def set_fuel(message: types.Message):
    try:
        fuel = float(message.text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5")
        return
    user_data[message.from_user.id]["fuel"] = fuel
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∑–∞ –¥–µ–Ω—å (–≤ —á–∞—Å–∞—Ö):")

@dp.message_handler(lambda m: "max_time" not in user_data.get(m.from_user.id, {}))
async def set_max_time(message: types.Message):
    try:
        t = float(message.text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 6")
        return
    user_data[message.from_user.id]["max_time"] = t

    uid = message.from_user.id
    route = get_route(user_data[uid]["start_coords"], user_data[uid]["end_coords"], config.ORS_API_KEY)
    if not route:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.")
        return

    distance_km = route["features"][0]["properties"]["segments"][0]["distance"] / 1000
    duration_h = route["features"][0]["properties"]["segments"][0]["duration"] / 3600
    fuel_needed = distance_km * user_data[uid]["fuel"] / 100

    user_data[uid]["route"] = route
    user_data[uid]["distance"] = distance_km
    user_data[uid]["duration"] = duration_h
    user_data[uid]["fuel_needed"] = fuel_needed

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞", "–ö–∞—Ñ–µ –∫–∞–∂–¥—ã–µ 100 –∫–º", "–û—Ç–µ–ª–∏ –∫–∞–∂–¥—ã–µ 100 –∫–º")
    keyboard.add("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")

